#!/bin/sh
# Purpose here is to get all of the lines that are between '@l' tokens
# into their own tex file. This will then be '\input'ed into the file
# generated by lowdown

# count and file are the varaibles that we need to keep track of.
# this is what is responsible for handling the @l tokens, and latex
# code in between them

USAGE="Usage: marktex [-lgwph] [-f file]"
HELP="$USAGE
-f, --file FILE
	Set the input file to FILE
-l, --latex
	Set the output format to LaTeX
-g, --groff
	Set the output format to groff (ms macros)
-w, --html
	Set the output format to html
-m, --markdown
	Set the output format to be markdown (clears the document of any extensions)
-h, --help
	Print this message
"
OUTFMT="latex"
for arg in "$@"
do
	case $arg in
		-l|--latex)
			OUTFMT="latex"
			shift
			;;
		-g|--groff)
			OUTFMT="groff"
			shift
			;;
		-w|--html)
			OUTFMT="html"
			shift
			;;
		-m|--markdown)
			OUTFMT="md"
			shift
			;;
		-h|--help)
			shift
			printf "%s" "$HELP"
			exit 1
			;;
		-f|--file)
			shift
			file="$1"
			shift
			;;
		*)
			shift
			;;
	esac
done

[ -z "$file" ] && echo "$USAGE" && echo "No file! Exiting..." && exit 1

case $OUTFMT in
	latex) ext="tex" ; highlightfmt="latexcolor"    ; lowdownfmt="latex";;
	groff) ext="ms"  ; highlightfmt="groff_mm_color"; lowdownfmt="ms"   ;;
	html)  ext="html"; highlightfmt="html"          ; lowdownfmt="html" ;;
	md)    ext="md"  ; highlightfmt="latexcolor"    ; lowdownfmt="latex";;
esac

echo "ext: $ext"
TEXCC=${TEXCC:-pdflatex}
GENFILES="$(mktemp)"
# Handle the LaTeX blocks
count=0
cp "${file}" "copy-${file}"
sed -n "/^@r$/=" "${file}" | awk '{if (NR % 2 == 0) {print $1} else {printf $1 "," }}' | while read -r LINE
do
	start=${LINE%%,*}
	end=${LINE##*,}
	cf="${count}-${file}.${ext}"
	sed -n "${start},${end}p" "${file}" > "$cf"
	sed -i "/@r/d" "$cf"
	sed "${start},${end}s/.*/@input@${cf}@/g" "copy-${file}" > "copy-${cf%%.*}"
	mv "copy-${cf%%.*}" "copy-${file}"
	echo "$cf" >> "$GENFILES"
	count=$((count + 1))
done

# Create the code files; both in the output document format and as an independent file (if applicable)
count=0
CODEBLOCK=N # Global variable to determine whether or not we have a code block in the file; if Y, then \usepackage[dvipsnames]{xcolor}
ptrn='```@C@?[a-z]*@?[a-z]*'

grep -Eq "${ptrn}" "${file}" && CODEBLOCK=Y

CODESRCFILES="$(grep -E "${ptrn}" "${file}" | cut -d"@" -f4 | sort -u)"
[ -n "$CODESRCFILES" ] && {
	for srcf in $CODESRCFILES
	do
		[ -e "$srcf" ] && {
			rm -v "$srcf"
		}
	done
}

sed -E -n "/^${ptrn}/=" "${file}" | awk '{if (NR % 2 == 0) { print $1 } else { printf $1 "," }}' | while read -r LINE
do
	start=${LINE%%,*}
	end=${LINE##*,}
	lang=$(sed -n "${start}p" "${file}" | cut -d'@' -f3)
	[ -n "$(sed -n "${start}p" "${file}" | cut -d'@' -f4)" ] && langfile="$(sed -n "${start}p" "${file}" | cut -d'@' -f4)" || langfile=""
	tl="${count}-code-${file}.tmp.${lang}"
	sed -n "${start},${end}p" "${file}" > "$tl"
	sed -E -i "/$ptrn/d" "$tl"
	[ -n "$langfile" ] && cat "$tl" >> "$langfile"
	source-highlight --src-lang "${lang}" --out-format "${highlightfmt}" -o "${tl%%.*}.${ext}" -i "$tl"
	rm "$tl"
	sed "${start},${end}s/.*/@input@${tl%%.*}.${ext}@/g" "copy-${file}" > "copy-${count}-${file}"
	mv "copy-${count}-${file}" "copy-${file}"
	echo "${tl%%.*}.${ext}" >> "$GENFILES"
	count=$((count + 1))
done

# Create the citation files
count=0
sed -n "/@c.*@c.*/=" "${file}" | while read -r LINE
do
	cf="${count}-cite-${file}.${ext}"
	sed -n "${LINE}p" "${file}" > "$cf"
	#FIXME: LaTeX Only
	case $OUTFMT in
		latex)
			sed -i -E -e "s=^[^@]*@c=@c=" -e "s/@c(.*)@c/\\\\autocite{\1}/g" "$cf"
			;;
		groff)
			sed -i -E -e "s=^[^@]*@c=@c=" -e "s/@c(.*)@c/\n.[\n\1\n.]\n/g" -e "s/;/\n/g" "$cf"
			;;
		html)
			;;
	esac
	sed "${LINE}s/@c.*@c/\n@input@${cf}@\n/" "copy-${file}" > "copy-${count}-${file}"
	mv "copy-${count}-${file}" "copy-${file}"
	echo "$cf" >> "$GENFILES"
	count=$((count + 1))
done

# Handle the Preamble block; this is only ran *once*
# Create the Preamble file
	#FIXME: LaTeX Only
if grep -E -q "^@p$" "${file}"
then
	PREAM=$(sed -n "/^@p$/=" "${file}" | awk '{if (NR % 2 == 0) {print $1} else {printf $1 "," }}')
	start=${PREAM%%,*}
	end=${PREAM##*,}
	sed -n "${start},${end}p" "${file}" > "preamble-${file}.${ext}"
	sed -i "/@p/d" "preamble-${file}.${ext}"
	sed -i "${start},${end}s/.*/@pre@preamble-${file}.${ext}@/g" "copy-${file}"
	echo "preamble-${file}.${ext}" >> "$GENFILES"
fi
# Now we are on to the @m tokens
#count=0; sed -n "/@m/=" ${file} | while read LINE
#do \
#	sed -n "${LINE}p" ${file} > ${count}-math-${file}.tex
#	sed -i -e "s=^[^@]*@m=@m=" -e "s/@m/$/g" ${count}-math-${file}.tex
#	sed "${LINE}s/@m.*@m/@input{${count}-math-${file}.tex}/" copy-${file} > copy-${count}-${file}
#	mv copy-${count}-${file} copy-${file}
#	count=$((count + 1))
#done

# Get rid of duplicate lines
uniq "copy-${file}" > "detex-${file}"
rm "copy-${file}"

# Comile the cleaned markdown with lowdown into the proper output format
lowdown -s -T${lowdownfmt} --parse-math "detex-${file}" -o "${file}.${ext}";
rm "detex-${file}"

if [ "$CODEBLOCK" = Y ]
then
	case $OUTFMT in
		latex) sed -i 's/age{xcolor}/age[dvipsnames]{xcolor}/' "${file}.${ext}";;
	esac
fi

# Add in the preamble and the actually input the '@input' files
#FIXME: LaTeX Only
if grep -q "@pre@" "${file}.${ext}"
then
	PREAMINC=$(grep "@pre@" "${file}.${ext}" | sed -E "s=@pre@(.*)@=input{\1}=")
	sed -i -E  "s=^(\\\\documentclass\[[a-zA-Z0-9,]*\]\{[a-zA-Z]*})$=\1\n\n\\\\$PREAMINC=" "${file}.${ext}"
	sed -i -E "s=^@pre@.*$==" "${file}.${ext}"
fi
#inputfiles="$(grep -E "@input@" "${file}.tex" | cut -d"@" -f3)"
#grep -E "@input@" "${file}.tex" | cut -d"@" -f3 | while read -r intputfile
# TODO: See if this for loop can be written as a while loop
for inputfile in $(grep -E "@input@" "${file}.${ext}" | cut -d"@" -f3 | tr '\n' ' ')
do
	sed -i "/@input@$inputfile@/r $inputfile" "${file}.${ext}"
	sed -i "/@input@$inputfile@/d"            "${file}.${ext}"
done

# Compile with the right compiler
case $OUTFMT in
	latex) ${TEXCC} "${file}.${ext}";;
	groff) refer < "${file}.${ext}" | preconv | eqn -Tpdf | tbl | pic | groff -mspdf -Tpdf > "${file}.pdf";;
	html) ;;
esac

# Remove temporary files
for f in $(cat "$GENFILES" | tr '\n' ' ')
do
	rm -v "$f"
done
rm "$GENFILES"
